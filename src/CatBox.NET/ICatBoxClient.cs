namespace CatBox.NET;

public interface ICatBoxClient
{
    /// <summary>
    /// Enables uploading multiple files from disk (FileStream) to the API
    /// </summary>
    /// <param name="fileUploadRequest"></param>
    /// <param name="ct">Cancellation Token</param>
    /// <exception cref="ArgumentNullException">When <see cref="FileUploadRequest"/> is null</exception>
    /// <returns>Response string from the API</returns>
    IAsyncEnumerable<string?> UploadMultipleImages(FileUploadRequest fileUploadRequest, CancellationToken ct = default);

    /// <summary>
    /// Enables uploading multiple files by URL to the API
    /// </summary>
    /// <param name="urlUploadRequest">Data to send to the API</param>
    /// <param name="ct">Cancellation Token</param>
    /// <exception cref="ArgumentNullException">When <see cref="UrlUploadRequest"/> is null</exception>
    /// <exception cref="HttpRequestException"> when something bad happens when talking to the API</exception>
    /// <returns>Response string from the API</returns>
    IAsyncEnumerable<string?> UploadMultipleUrls(UrlUploadRequest urlUploadRequest, CancellationToken ct = default);

    /// <summary>
    /// Deletes multiple files by API file name
    /// </summary>
    /// <param name="deleteFileRequest">Files to delete from the server</param>
    /// <param name="ct">Cancellation Token</param>
    /// <exception cref="ArgumentNullException">When <see cref="DeleteFileRequest"/> is null</exception>
    /// <exception cref="ArgumentNullException">When <see cref="DeleteFileRequest.UserHash"/> is null</exception>
    /// <exception cref="ArgumentException">When <see cref="DeleteFileRequest.FileNames"/> is null, empty, or whitespace</exception>
    /// <exception cref="HttpRequestException"> when something bad happens when talking to the API</exception>
    /// <returns>Response string from the API</returns>
    Task<string?> DeleteMultipleFiles(DeleteFileRequest deleteFileRequest, CancellationToken ct = default);

    /// <summary>
    /// Streams a single image to be uploaded
    /// </summary>
    /// <param name="fileUploadRequest"></param>
    /// <param name="ct">Cancellation Token</param>
    /// <exception cref="ArgumentNullException">When <see cref="StreamUploadRequest"/> is null</exception>
    /// <exception cref="ArgumentNullException">When <see cref="StreamUploadRequest.FileName"/> is null</exception>
    /// <exception cref="HttpRequestException"> when something bad happens when talking to the API</exception>
    /// <returns>Response string from the API</returns>
    Task<string?> UploadImage(StreamUploadRequest fileUploadRequest, CancellationToken ct = default);

    /// <summary>
    /// Creates an album on CatBox via provided file names generated by the API
    /// </summary>
    /// <param name="createAlbumRequest">Data to pass to the API</param>
    /// <param name="ct">Cancellation Token</param>
    /// <exception cref="ArgumentNullException"> when <see cref="CreateAlbumRequest"/> is null</exception>
    /// <exception cref="ArgumentNullException"> when <see cref="CreateAlbumRequest.Description"/> is null, empty, or whitespace</exception>
    /// <exception cref="ArgumentNullException"> when <see cref="CreateAlbumRequest.Title"/> is null, empty, or whitespace</exception>
    /// <exception cref="ArgumentNullException"> when <see cref="CreateAlbumRequest.Files"/> is null, empty, or whitespace</exception>
    /// <exception cref="HttpRequestException"> when something bad happens when talking to the API</exception>
    /// <returns>Response string from the API</returns>
    Task<string?> CreateAlbum(CreateAlbumRequest createAlbumRequest, CancellationToken ct = default);

    /// <summary>
    /// Edits the content of album according to the content that is passed to the API
    /// </summary>
    /// <param name="editAlbumRequest">Data to pass to the API</param>
    /// <param name="ct">Cancellation Token</param>
    /// <exception cref="ArgumentNullException"> when <see cref="EditAlbumRequest"/> is null</exception>
    /// <exception cref="ArgumentNullException"> when <see cref="EditAlbumRequest.UserHash"/> is null, empty, or whitespace</exception>
    /// <exception cref="ArgumentNullException"> when <see cref="EditAlbumRequest.Description"/> is null, empty, or whitespace</exception>
    /// <exception cref="ArgumentNullException"> when <see cref="EditAlbumRequest.Title"/> is null, empty, or whitespace</exception>
    /// <exception cref="ArgumentNullException"> when <see cref="EditAlbumRequest.AlbumId"/> is null, empty, or whitespace</exception>
    /// <exception cref="ArgumentNullException"> when <see cref="EditAlbumRequest.Files"/> is null, empty, or whitespace</exception>
    /// <exception cref="HttpRequestException"> when something bad happens when talking to the API</exception>
    /// <returns>Response string from the API</returns>
    Task<string?> EditAlbum(EditAlbumRequest editAlbumRequest, CancellationToken ct = default);

    /// <summary>
    /// This endpoint is for adding files to an album, removing files from an album, or deleting the album
    /// </summary>
    /// <param name="albumRequest">Data to pass to the API</param>
    /// <param name="ct">Cancellation Token</param>
    /// <exception cref="ArgumentNullException"> when <see cref="AlbumRequest"/> </exception>
    /// <exception cref="ArgumentNullException"> when <see cref="AlbumRequest.UserHash"/> is null, empty, or whitespace</exception>
    /// <exception cref="ArgumentNullException"> when <see cref="AlbumRequest.Files"/> is null, empty, or whitespace</exception>
    /// <exception cref="ArgumentException"> when <see cref="AlbumRequest.Request"/> is not valid for this request type</exception>
    /// <exception cref="InvalidOperationException"> when <see cref="AlbumRequest.Request"/> is not CatBoxRequestTypes.AddToAlbum, CatBoxRequestTypes.RemoveFromAlbum, CatBoxRequestTypes.DeleteAlbum</exception>
    /// <exception cref="HttpRequestException"> when something bad happens when talking to the API</exception>
    /// <returns>Response string from the API</returns>
    Task<string?> ModifyAlbum(AlbumRequest albumRequest, CancellationToken ct = default);
}
